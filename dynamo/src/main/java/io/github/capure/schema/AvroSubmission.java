/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.capure.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroSubmission extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7703296665128680289L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroSubmission\",\"namespace\":\"io.github.capure.schema\",\"fields\":[{\"name\":\"submissionId\",\"type\":\"long\"},{\"name\":\"problemId\",\"type\":\"long\"},{\"name\":\"sourceCode\",\"type\":\"string\"},{\"name\":\"language\",\"type\":{\"type\":\"enum\",\"name\":\"AvroLanguage\",\"symbols\":[\"C\",\"CPP\",\"PYTHON\"]}},{\"name\":\"timeLimit\",\"type\":\"int\"},{\"name\":\"memoryLimit\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroSubmission> ENCODER =
      new BinaryMessageEncoder<AvroSubmission>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroSubmission> DECODER =
      new BinaryMessageDecoder<AvroSubmission>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroSubmission> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroSubmission> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroSubmission>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroSubmission to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroSubmission from a ByteBuffer. */
  public static AvroSubmission fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long submissionId;
  @Deprecated public long problemId;
  @Deprecated public java.lang.CharSequence sourceCode;
  @Deprecated public io.github.capure.schema.AvroLanguage language;
  @Deprecated public int timeLimit;
  @Deprecated public int memoryLimit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroSubmission() {}

  /**
   * All-args constructor.
   * @param submissionId The new value for submissionId
   * @param problemId The new value for problemId
   * @param sourceCode The new value for sourceCode
   * @param language The new value for language
   * @param timeLimit The new value for timeLimit
   * @param memoryLimit The new value for memoryLimit
   */
  public AvroSubmission(java.lang.Long submissionId, java.lang.Long problemId, java.lang.CharSequence sourceCode, io.github.capure.schema.AvroLanguage language, java.lang.Integer timeLimit, java.lang.Integer memoryLimit) {
    this.submissionId = submissionId;
    this.problemId = problemId;
    this.sourceCode = sourceCode;
    this.language = language;
    this.timeLimit = timeLimit;
    this.memoryLimit = memoryLimit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return submissionId;
    case 1: return problemId;
    case 2: return sourceCode;
    case 3: return language;
    case 4: return timeLimit;
    case 5: return memoryLimit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: submissionId = (java.lang.Long)value$; break;
    case 1: problemId = (java.lang.Long)value$; break;
    case 2: sourceCode = (java.lang.CharSequence)value$; break;
    case 3: language = (io.github.capure.schema.AvroLanguage)value$; break;
    case 4: timeLimit = (java.lang.Integer)value$; break;
    case 5: memoryLimit = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'submissionId' field.
   * @return The value of the 'submissionId' field.
   */
  public java.lang.Long getSubmissionId() {
    return submissionId;
  }

  /**
   * Sets the value of the 'submissionId' field.
   * @param value the value to set.
   */
  public void setSubmissionId(java.lang.Long value) {
    this.submissionId = value;
  }

  /**
   * Gets the value of the 'problemId' field.
   * @return The value of the 'problemId' field.
   */
  public java.lang.Long getProblemId() {
    return problemId;
  }

  /**
   * Sets the value of the 'problemId' field.
   * @param value the value to set.
   */
  public void setProblemId(java.lang.Long value) {
    this.problemId = value;
  }

  /**
   * Gets the value of the 'sourceCode' field.
   * @return The value of the 'sourceCode' field.
   */
  public java.lang.CharSequence getSourceCode() {
    return sourceCode;
  }

  /**
   * Sets the value of the 'sourceCode' field.
   * @param value the value to set.
   */
  public void setSourceCode(java.lang.CharSequence value) {
    this.sourceCode = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public io.github.capure.schema.AvroLanguage getLanguage() {
    return language;
  }

  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(io.github.capure.schema.AvroLanguage value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'timeLimit' field.
   * @return The value of the 'timeLimit' field.
   */
  public java.lang.Integer getTimeLimit() {
    return timeLimit;
  }

  /**
   * Sets the value of the 'timeLimit' field.
   * @param value the value to set.
   */
  public void setTimeLimit(java.lang.Integer value) {
    this.timeLimit = value;
  }

  /**
   * Gets the value of the 'memoryLimit' field.
   * @return The value of the 'memoryLimit' field.
   */
  public java.lang.Integer getMemoryLimit() {
    return memoryLimit;
  }

  /**
   * Sets the value of the 'memoryLimit' field.
   * @param value the value to set.
   */
  public void setMemoryLimit(java.lang.Integer value) {
    this.memoryLimit = value;
  }

  /**
   * Creates a new AvroSubmission RecordBuilder.
   * @return A new AvroSubmission RecordBuilder
   */
  public static io.github.capure.schema.AvroSubmission.Builder newBuilder() {
    return new io.github.capure.schema.AvroSubmission.Builder();
  }

  /**
   * Creates a new AvroSubmission RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroSubmission RecordBuilder
   */
  public static io.github.capure.schema.AvroSubmission.Builder newBuilder(io.github.capure.schema.AvroSubmission.Builder other) {
    return new io.github.capure.schema.AvroSubmission.Builder(other);
  }

  /**
   * Creates a new AvroSubmission RecordBuilder by copying an existing AvroSubmission instance.
   * @param other The existing instance to copy.
   * @return A new AvroSubmission RecordBuilder
   */
  public static io.github.capure.schema.AvroSubmission.Builder newBuilder(io.github.capure.schema.AvroSubmission other) {
    return new io.github.capure.schema.AvroSubmission.Builder(other);
  }

  /**
   * RecordBuilder for AvroSubmission instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroSubmission>
    implements org.apache.avro.data.RecordBuilder<AvroSubmission> {

    private long submissionId;
    private long problemId;
    private java.lang.CharSequence sourceCode;
    private io.github.capure.schema.AvroLanguage language;
    private int timeLimit;
    private int memoryLimit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.capure.schema.AvroSubmission.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.submissionId)) {
        this.submissionId = data().deepCopy(fields()[0].schema(), other.submissionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.problemId)) {
        this.problemId = data().deepCopy(fields()[1].schema(), other.problemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceCode)) {
        this.sourceCode = data().deepCopy(fields()[2].schema(), other.sourceCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.language)) {
        this.language = data().deepCopy(fields()[3].schema(), other.language);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timeLimit)) {
        this.timeLimit = data().deepCopy(fields()[4].schema(), other.timeLimit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.memoryLimit)) {
        this.memoryLimit = data().deepCopy(fields()[5].schema(), other.memoryLimit);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroSubmission instance
     * @param other The existing instance to copy.
     */
    private Builder(io.github.capure.schema.AvroSubmission other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.submissionId)) {
        this.submissionId = data().deepCopy(fields()[0].schema(), other.submissionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.problemId)) {
        this.problemId = data().deepCopy(fields()[1].schema(), other.problemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourceCode)) {
        this.sourceCode = data().deepCopy(fields()[2].schema(), other.sourceCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.language)) {
        this.language = data().deepCopy(fields()[3].schema(), other.language);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timeLimit)) {
        this.timeLimit = data().deepCopy(fields()[4].schema(), other.timeLimit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.memoryLimit)) {
        this.memoryLimit = data().deepCopy(fields()[5].schema(), other.memoryLimit);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'submissionId' field.
      * @return The value.
      */
    public java.lang.Long getSubmissionId() {
      return submissionId;
    }

    /**
      * Sets the value of the 'submissionId' field.
      * @param value The value of 'submissionId'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder setSubmissionId(long value) {
      validate(fields()[0], value);
      this.submissionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'submissionId' field has been set.
      * @return True if the 'submissionId' field has been set, false otherwise.
      */
    public boolean hasSubmissionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'submissionId' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder clearSubmissionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'problemId' field.
      * @return The value.
      */
    public java.lang.Long getProblemId() {
      return problemId;
    }

    /**
      * Sets the value of the 'problemId' field.
      * @param value The value of 'problemId'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder setProblemId(long value) {
      validate(fields()[1], value);
      this.problemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'problemId' field has been set.
      * @return True if the 'problemId' field has been set, false otherwise.
      */
    public boolean hasProblemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'problemId' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder clearProblemId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceCode() {
      return sourceCode;
    }

    /**
      * Sets the value of the 'sourceCode' field.
      * @param value The value of 'sourceCode'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder setSourceCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sourceCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceCode' field has been set.
      * @return True if the 'sourceCode' field has been set, false otherwise.
      */
    public boolean hasSourceCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sourceCode' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder clearSourceCode() {
      sourceCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public io.github.capure.schema.AvroLanguage getLanguage() {
      return language;
    }

    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder setLanguage(io.github.capure.schema.AvroLanguage value) {
      validate(fields()[3], value);
      this.language = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeLimit' field.
      * @return The value.
      */
    public java.lang.Integer getTimeLimit() {
      return timeLimit;
    }

    /**
      * Sets the value of the 'timeLimit' field.
      * @param value The value of 'timeLimit'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder setTimeLimit(int value) {
      validate(fields()[4], value);
      this.timeLimit = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timeLimit' field has been set.
      * @return True if the 'timeLimit' field has been set, false otherwise.
      */
    public boolean hasTimeLimit() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timeLimit' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder clearTimeLimit() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'memoryLimit' field.
      * @return The value.
      */
    public java.lang.Integer getMemoryLimit() {
      return memoryLimit;
    }

    /**
      * Sets the value of the 'memoryLimit' field.
      * @param value The value of 'memoryLimit'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder setMemoryLimit(int value) {
      validate(fields()[5], value);
      this.memoryLimit = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'memoryLimit' field has been set.
      * @return True if the 'memoryLimit' field has been set, false otherwise.
      */
    public boolean hasMemoryLimit() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'memoryLimit' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmission.Builder clearMemoryLimit() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroSubmission build() {
      try {
        AvroSubmission record = new AvroSubmission();
        record.submissionId = fieldSetFlags()[0] ? this.submissionId : (java.lang.Long) defaultValue(fields()[0]);
        record.problemId = fieldSetFlags()[1] ? this.problemId : (java.lang.Long) defaultValue(fields()[1]);
        record.sourceCode = fieldSetFlags()[2] ? this.sourceCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.language = fieldSetFlags()[3] ? this.language : (io.github.capure.schema.AvroLanguage) defaultValue(fields()[3]);
        record.timeLimit = fieldSetFlags()[4] ? this.timeLimit : (java.lang.Integer) defaultValue(fields()[4]);
        record.memoryLimit = fieldSetFlags()[5] ? this.memoryLimit : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroSubmission>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroSubmission>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroSubmission>
    READER$ = (org.apache.avro.io.DatumReader<AvroSubmission>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
