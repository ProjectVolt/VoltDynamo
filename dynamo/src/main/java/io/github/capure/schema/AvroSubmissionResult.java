/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.capure.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroSubmissionResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5424502087994789437L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroSubmissionResult\",\"namespace\":\"io.github.capure.schema\",\"fields\":[{\"name\":\"submissionId\",\"type\":\"long\"},{\"name\":\"problemId\",\"type\":\"long\"},{\"name\":\"compileSuccess\",\"type\":\"boolean\"},{\"name\":\"runSuccess\",\"type\":\"boolean\"},{\"name\":\"answerSuccess\",\"type\":\"boolean\"},{\"name\":\"compileError\",\"type\":{\"type\":\"record\",\"name\":\"AvroCompileError\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"fatal\",\"type\":\"boolean\"}]}},{\"name\":\"testResults\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroTestCaseResult\",\"fields\":[{\"name\":\"testCaseId\",\"type\":\"long\"},{\"name\":\"output\",\"type\":\"string\"},{\"name\":\"judgerResult\",\"type\":{\"type\":\"record\",\"name\":\"AvroJudgerResult\",\"fields\":[{\"name\":\"cpuTime\",\"type\":\"int\"},{\"name\":\"realTime\",\"type\":\"int\"},{\"name\":\"memory\",\"type\":\"int\"},{\"name\":\"signal\",\"type\":\"int\"},{\"name\":\"exitCode\",\"type\":\"int\"},{\"name\":\"error\",\"type\":{\"type\":\"enum\",\"name\":\"AvroJudgerResultError\",\"symbols\":[\"ERROR_NONE\",\"ERROR_INVALID_CONFIG\",\"ERROR_FORK_FAILED\",\"ERROR_PTHREAD_FAILED\",\"ERROR_WAIT_FAILED\",\"ERROR_ROOT_REQUIRED\",\"ERROR_LOAD_SECCOMP_FAILED\",\"ERROR_SETRLIMIT_FAILED\",\"ERROR_DUP2_FAILED\",\"ERROR_SETUID_FAILED\",\"ERROR_EXECVE_FAILED\",\"ERROR_SPJ_ERROR\"]}},{\"name\":\"result\",\"type\":{\"type\":\"enum\",\"name\":\"AvroJudgerResultCode\",\"symbols\":[\"RESULT_SUCCESS\",\"RESULT_WRONG_ANSWER\",\"RESULT_CPU_TIME_LIMIT_EXCEEDED\",\"RESULT_REAL_TIME_LIMIT_EXCEEDED\",\"RESULT_MEMORY_LIMIT_EXCEEDED\",\"RESULT_RUNTIME_ERROR\",\"RESULT_SYSTEM_ERROR\"]}}]}},{\"name\":\"score\",\"type\":\"int\"},{\"name\":\"errorMessage\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroSubmissionResult> ENCODER =
      new BinaryMessageEncoder<AvroSubmissionResult>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroSubmissionResult> DECODER =
      new BinaryMessageDecoder<AvroSubmissionResult>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroSubmissionResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroSubmissionResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroSubmissionResult>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroSubmissionResult to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroSubmissionResult from a ByteBuffer. */
  public static AvroSubmissionResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long submissionId;
  @Deprecated public long problemId;
  @Deprecated public boolean compileSuccess;
  @Deprecated public boolean runSuccess;
  @Deprecated public boolean answerSuccess;
  @Deprecated public io.github.capure.schema.AvroCompileError compileError;
  @Deprecated public java.util.List<io.github.capure.schema.AvroTestCaseResult> testResults;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroSubmissionResult() {}

  /**
   * All-args constructor.
   * @param submissionId The new value for submissionId
   * @param problemId The new value for problemId
   * @param compileSuccess The new value for compileSuccess
   * @param runSuccess The new value for runSuccess
   * @param answerSuccess The new value for answerSuccess
   * @param compileError The new value for compileError
   * @param testResults The new value for testResults
   */
  public AvroSubmissionResult(java.lang.Long submissionId, java.lang.Long problemId, java.lang.Boolean compileSuccess, java.lang.Boolean runSuccess, java.lang.Boolean answerSuccess, io.github.capure.schema.AvroCompileError compileError, java.util.List<io.github.capure.schema.AvroTestCaseResult> testResults) {
    this.submissionId = submissionId;
    this.problemId = problemId;
    this.compileSuccess = compileSuccess;
    this.runSuccess = runSuccess;
    this.answerSuccess = answerSuccess;
    this.compileError = compileError;
    this.testResults = testResults;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return submissionId;
    case 1: return problemId;
    case 2: return compileSuccess;
    case 3: return runSuccess;
    case 4: return answerSuccess;
    case 5: return compileError;
    case 6: return testResults;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: submissionId = (java.lang.Long)value$; break;
    case 1: problemId = (java.lang.Long)value$; break;
    case 2: compileSuccess = (java.lang.Boolean)value$; break;
    case 3: runSuccess = (java.lang.Boolean)value$; break;
    case 4: answerSuccess = (java.lang.Boolean)value$; break;
    case 5: compileError = (io.github.capure.schema.AvroCompileError)value$; break;
    case 6: testResults = (java.util.List<io.github.capure.schema.AvroTestCaseResult>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'submissionId' field.
   * @return The value of the 'submissionId' field.
   */
  public java.lang.Long getSubmissionId() {
    return submissionId;
  }

  /**
   * Sets the value of the 'submissionId' field.
   * @param value the value to set.
   */
  public void setSubmissionId(java.lang.Long value) {
    this.submissionId = value;
  }

  /**
   * Gets the value of the 'problemId' field.
   * @return The value of the 'problemId' field.
   */
  public java.lang.Long getProblemId() {
    return problemId;
  }

  /**
   * Sets the value of the 'problemId' field.
   * @param value the value to set.
   */
  public void setProblemId(java.lang.Long value) {
    this.problemId = value;
  }

  /**
   * Gets the value of the 'compileSuccess' field.
   * @return The value of the 'compileSuccess' field.
   */
  public java.lang.Boolean getCompileSuccess() {
    return compileSuccess;
  }

  /**
   * Sets the value of the 'compileSuccess' field.
   * @param value the value to set.
   */
  public void setCompileSuccess(java.lang.Boolean value) {
    this.compileSuccess = value;
  }

  /**
   * Gets the value of the 'runSuccess' field.
   * @return The value of the 'runSuccess' field.
   */
  public java.lang.Boolean getRunSuccess() {
    return runSuccess;
  }

  /**
   * Sets the value of the 'runSuccess' field.
   * @param value the value to set.
   */
  public void setRunSuccess(java.lang.Boolean value) {
    this.runSuccess = value;
  }

  /**
   * Gets the value of the 'answerSuccess' field.
   * @return The value of the 'answerSuccess' field.
   */
  public java.lang.Boolean getAnswerSuccess() {
    return answerSuccess;
  }

  /**
   * Sets the value of the 'answerSuccess' field.
   * @param value the value to set.
   */
  public void setAnswerSuccess(java.lang.Boolean value) {
    this.answerSuccess = value;
  }

  /**
   * Gets the value of the 'compileError' field.
   * @return The value of the 'compileError' field.
   */
  public io.github.capure.schema.AvroCompileError getCompileError() {
    return compileError;
  }

  /**
   * Sets the value of the 'compileError' field.
   * @param value the value to set.
   */
  public void setCompileError(io.github.capure.schema.AvroCompileError value) {
    this.compileError = value;
  }

  /**
   * Gets the value of the 'testResults' field.
   * @return The value of the 'testResults' field.
   */
  public java.util.List<io.github.capure.schema.AvroTestCaseResult> getTestResults() {
    return testResults;
  }

  /**
   * Sets the value of the 'testResults' field.
   * @param value the value to set.
   */
  public void setTestResults(java.util.List<io.github.capure.schema.AvroTestCaseResult> value) {
    this.testResults = value;
  }

  /**
   * Creates a new AvroSubmissionResult RecordBuilder.
   * @return A new AvroSubmissionResult RecordBuilder
   */
  public static io.github.capure.schema.AvroSubmissionResult.Builder newBuilder() {
    return new io.github.capure.schema.AvroSubmissionResult.Builder();
  }

  /**
   * Creates a new AvroSubmissionResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroSubmissionResult RecordBuilder
   */
  public static io.github.capure.schema.AvroSubmissionResult.Builder newBuilder(io.github.capure.schema.AvroSubmissionResult.Builder other) {
    return new io.github.capure.schema.AvroSubmissionResult.Builder(other);
  }

  /**
   * Creates a new AvroSubmissionResult RecordBuilder by copying an existing AvroSubmissionResult instance.
   * @param other The existing instance to copy.
   * @return A new AvroSubmissionResult RecordBuilder
   */
  public static io.github.capure.schema.AvroSubmissionResult.Builder newBuilder(io.github.capure.schema.AvroSubmissionResult other) {
    return new io.github.capure.schema.AvroSubmissionResult.Builder(other);
  }

  /**
   * RecordBuilder for AvroSubmissionResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroSubmissionResult>
    implements org.apache.avro.data.RecordBuilder<AvroSubmissionResult> {

    private long submissionId;
    private long problemId;
    private boolean compileSuccess;
    private boolean runSuccess;
    private boolean answerSuccess;
    private io.github.capure.schema.AvroCompileError compileError;
    private io.github.capure.schema.AvroCompileError.Builder compileErrorBuilder;
    private java.util.List<io.github.capure.schema.AvroTestCaseResult> testResults;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.capure.schema.AvroSubmissionResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.submissionId)) {
        this.submissionId = data().deepCopy(fields()[0].schema(), other.submissionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.problemId)) {
        this.problemId = data().deepCopy(fields()[1].schema(), other.problemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.compileSuccess)) {
        this.compileSuccess = data().deepCopy(fields()[2].schema(), other.compileSuccess);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.runSuccess)) {
        this.runSuccess = data().deepCopy(fields()[3].schema(), other.runSuccess);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.answerSuccess)) {
        this.answerSuccess = data().deepCopy(fields()[4].schema(), other.answerSuccess);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.compileError)) {
        this.compileError = data().deepCopy(fields()[5].schema(), other.compileError);
        fieldSetFlags()[5] = true;
      }
      if (other.hasCompileErrorBuilder()) {
        this.compileErrorBuilder = io.github.capure.schema.AvroCompileError.newBuilder(other.getCompileErrorBuilder());
      }
      if (isValidValue(fields()[6], other.testResults)) {
        this.testResults = data().deepCopy(fields()[6].schema(), other.testResults);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroSubmissionResult instance
     * @param other The existing instance to copy.
     */
    private Builder(io.github.capure.schema.AvroSubmissionResult other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.submissionId)) {
        this.submissionId = data().deepCopy(fields()[0].schema(), other.submissionId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.problemId)) {
        this.problemId = data().deepCopy(fields()[1].schema(), other.problemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.compileSuccess)) {
        this.compileSuccess = data().deepCopy(fields()[2].schema(), other.compileSuccess);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.runSuccess)) {
        this.runSuccess = data().deepCopy(fields()[3].schema(), other.runSuccess);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.answerSuccess)) {
        this.answerSuccess = data().deepCopy(fields()[4].schema(), other.answerSuccess);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.compileError)) {
        this.compileError = data().deepCopy(fields()[5].schema(), other.compileError);
        fieldSetFlags()[5] = true;
      }
      this.compileErrorBuilder = null;
      if (isValidValue(fields()[6], other.testResults)) {
        this.testResults = data().deepCopy(fields()[6].schema(), other.testResults);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'submissionId' field.
      * @return The value.
      */
    public java.lang.Long getSubmissionId() {
      return submissionId;
    }

    /**
      * Sets the value of the 'submissionId' field.
      * @param value The value of 'submissionId'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setSubmissionId(long value) {
      validate(fields()[0], value);
      this.submissionId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'submissionId' field has been set.
      * @return True if the 'submissionId' field has been set, false otherwise.
      */
    public boolean hasSubmissionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'submissionId' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearSubmissionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'problemId' field.
      * @return The value.
      */
    public java.lang.Long getProblemId() {
      return problemId;
    }

    /**
      * Sets the value of the 'problemId' field.
      * @param value The value of 'problemId'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setProblemId(long value) {
      validate(fields()[1], value);
      this.problemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'problemId' field has been set.
      * @return True if the 'problemId' field has been set, false otherwise.
      */
    public boolean hasProblemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'problemId' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearProblemId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'compileSuccess' field.
      * @return The value.
      */
    public java.lang.Boolean getCompileSuccess() {
      return compileSuccess;
    }

    /**
      * Sets the value of the 'compileSuccess' field.
      * @param value The value of 'compileSuccess'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setCompileSuccess(boolean value) {
      validate(fields()[2], value);
      this.compileSuccess = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'compileSuccess' field has been set.
      * @return True if the 'compileSuccess' field has been set, false otherwise.
      */
    public boolean hasCompileSuccess() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'compileSuccess' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearCompileSuccess() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'runSuccess' field.
      * @return The value.
      */
    public java.lang.Boolean getRunSuccess() {
      return runSuccess;
    }

    /**
      * Sets the value of the 'runSuccess' field.
      * @param value The value of 'runSuccess'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setRunSuccess(boolean value) {
      validate(fields()[3], value);
      this.runSuccess = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'runSuccess' field has been set.
      * @return True if the 'runSuccess' field has been set, false otherwise.
      */
    public boolean hasRunSuccess() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'runSuccess' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearRunSuccess() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'answerSuccess' field.
      * @return The value.
      */
    public java.lang.Boolean getAnswerSuccess() {
      return answerSuccess;
    }

    /**
      * Sets the value of the 'answerSuccess' field.
      * @param value The value of 'answerSuccess'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setAnswerSuccess(boolean value) {
      validate(fields()[4], value);
      this.answerSuccess = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'answerSuccess' field has been set.
      * @return True if the 'answerSuccess' field has been set, false otherwise.
      */
    public boolean hasAnswerSuccess() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'answerSuccess' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearAnswerSuccess() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'compileError' field.
      * @return The value.
      */
    public io.github.capure.schema.AvroCompileError getCompileError() {
      return compileError;
    }

    /**
      * Sets the value of the 'compileError' field.
      * @param value The value of 'compileError'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setCompileError(io.github.capure.schema.AvroCompileError value) {
      validate(fields()[5], value);
      this.compileErrorBuilder = null;
      this.compileError = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'compileError' field has been set.
      * @return True if the 'compileError' field has been set, false otherwise.
      */
    public boolean hasCompileError() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'compileError' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.github.capure.schema.AvroCompileError.Builder getCompileErrorBuilder() {
      if (compileErrorBuilder == null) {
        if (hasCompileError()) {
          setCompileErrorBuilder(io.github.capure.schema.AvroCompileError.newBuilder(compileError));
        } else {
          setCompileErrorBuilder(io.github.capure.schema.AvroCompileError.newBuilder());
        }
      }
      return compileErrorBuilder;
    }

    /**
     * Sets the Builder instance for the 'compileError' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.github.capure.schema.AvroSubmissionResult.Builder setCompileErrorBuilder(io.github.capure.schema.AvroCompileError.Builder value) {
      clearCompileError();
      compileErrorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'compileError' field has an active Builder instance
     * @return True if the 'compileError' field has an active Builder instance
     */
    public boolean hasCompileErrorBuilder() {
      return compileErrorBuilder != null;
    }

    /**
      * Clears the value of the 'compileError' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearCompileError() {
      compileError = null;
      compileErrorBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'testResults' field.
      * @return The value.
      */
    public java.util.List<io.github.capure.schema.AvroTestCaseResult> getTestResults() {
      return testResults;
    }

    /**
      * Sets the value of the 'testResults' field.
      * @param value The value of 'testResults'.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder setTestResults(java.util.List<io.github.capure.schema.AvroTestCaseResult> value) {
      validate(fields()[6], value);
      this.testResults = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'testResults' field has been set.
      * @return True if the 'testResults' field has been set, false otherwise.
      */
    public boolean hasTestResults() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'testResults' field.
      * @return This builder.
      */
    public io.github.capure.schema.AvroSubmissionResult.Builder clearTestResults() {
      testResults = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroSubmissionResult build() {
      try {
        AvroSubmissionResult record = new AvroSubmissionResult();
        record.submissionId = fieldSetFlags()[0] ? this.submissionId : (java.lang.Long) defaultValue(fields()[0]);
        record.problemId = fieldSetFlags()[1] ? this.problemId : (java.lang.Long) defaultValue(fields()[1]);
        record.compileSuccess = fieldSetFlags()[2] ? this.compileSuccess : (java.lang.Boolean) defaultValue(fields()[2]);
        record.runSuccess = fieldSetFlags()[3] ? this.runSuccess : (java.lang.Boolean) defaultValue(fields()[3]);
        record.answerSuccess = fieldSetFlags()[4] ? this.answerSuccess : (java.lang.Boolean) defaultValue(fields()[4]);
        if (compileErrorBuilder != null) {
          record.compileError = this.compileErrorBuilder.build();
        } else {
          record.compileError = fieldSetFlags()[5] ? this.compileError : (io.github.capure.schema.AvroCompileError) defaultValue(fields()[5]);
        }
        record.testResults = fieldSetFlags()[6] ? this.testResults : (java.util.List<io.github.capure.schema.AvroTestCaseResult>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroSubmissionResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroSubmissionResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroSubmissionResult>
    READER$ = (org.apache.avro.io.DatumReader<AvroSubmissionResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
