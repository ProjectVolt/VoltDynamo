/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.capure.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TestCaseEventDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8948918379724522279L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestCaseEventDetails\",\"namespace\":\"io.github.capure.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"problemId\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"input\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"output\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"maxScore\",\"type\":\"int\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestCaseEventDetails> ENCODER =
      new BinaryMessageEncoder<TestCaseEventDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestCaseEventDetails> DECODER =
      new BinaryMessageDecoder<TestCaseEventDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestCaseEventDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestCaseEventDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestCaseEventDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestCaseEventDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestCaseEventDetails from a ByteBuffer. */
  public static TestCaseEventDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public long problemId;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence input;
  @Deprecated public java.lang.CharSequence output;
  @Deprecated public int maxScore;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestCaseEventDetails() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param problemId The new value for problemId
   * @param name The new value for name
   * @param input The new value for input
   * @param output The new value for output
   * @param maxScore The new value for maxScore
   */
  public TestCaseEventDetails(java.lang.Long id, java.lang.Long problemId, java.lang.CharSequence name, java.lang.CharSequence input, java.lang.CharSequence output, java.lang.Integer maxScore) {
    this.id = id;
    this.problemId = problemId;
    this.name = name;
    this.input = input;
    this.output = output;
    this.maxScore = maxScore;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return problemId;
    case 2: return name;
    case 3: return input;
    case 4: return output;
    case 5: return maxScore;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: problemId = (java.lang.Long)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: input = (java.lang.CharSequence)value$; break;
    case 4: output = (java.lang.CharSequence)value$; break;
    case 5: maxScore = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'problemId' field.
   * @return The value of the 'problemId' field.
   */
  public java.lang.Long getProblemId() {
    return problemId;
  }

  /**
   * Sets the value of the 'problemId' field.
   * @param value the value to set.
   */
  public void setProblemId(java.lang.Long value) {
    this.problemId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The value of the 'input' field.
   */
  public java.lang.CharSequence getInput() {
    return input;
  }

  /**
   * Sets the value of the 'input' field.
   * @param value the value to set.
   */
  public void setInput(java.lang.CharSequence value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'output' field.
   * @return The value of the 'output' field.
   */
  public java.lang.CharSequence getOutput() {
    return output;
  }

  /**
   * Sets the value of the 'output' field.
   * @param value the value to set.
   */
  public void setOutput(java.lang.CharSequence value) {
    this.output = value;
  }

  /**
   * Gets the value of the 'maxScore' field.
   * @return The value of the 'maxScore' field.
   */
  public java.lang.Integer getMaxScore() {
    return maxScore;
  }

  /**
   * Sets the value of the 'maxScore' field.
   * @param value the value to set.
   */
  public void setMaxScore(java.lang.Integer value) {
    this.maxScore = value;
  }

  /**
   * Creates a new TestCaseEventDetails RecordBuilder.
   * @return A new TestCaseEventDetails RecordBuilder
   */
  public static io.github.capure.schema.TestCaseEventDetails.Builder newBuilder() {
    return new io.github.capure.schema.TestCaseEventDetails.Builder();
  }

  /**
   * Creates a new TestCaseEventDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestCaseEventDetails RecordBuilder
   */
  public static io.github.capure.schema.TestCaseEventDetails.Builder newBuilder(io.github.capure.schema.TestCaseEventDetails.Builder other) {
    return new io.github.capure.schema.TestCaseEventDetails.Builder(other);
  }

  /**
   * Creates a new TestCaseEventDetails RecordBuilder by copying an existing TestCaseEventDetails instance.
   * @param other The existing instance to copy.
   * @return A new TestCaseEventDetails RecordBuilder
   */
  public static io.github.capure.schema.TestCaseEventDetails.Builder newBuilder(io.github.capure.schema.TestCaseEventDetails other) {
    return new io.github.capure.schema.TestCaseEventDetails.Builder(other);
  }

  /**
   * RecordBuilder for TestCaseEventDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestCaseEventDetails>
    implements org.apache.avro.data.RecordBuilder<TestCaseEventDetails> {

    private long id;
    private long problemId;
    private java.lang.CharSequence name;
    private java.lang.CharSequence input;
    private java.lang.CharSequence output;
    private int maxScore;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.capure.schema.TestCaseEventDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.problemId)) {
        this.problemId = data().deepCopy(fields()[1].schema(), other.problemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.input)) {
        this.input = data().deepCopy(fields()[3].schema(), other.input);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.output)) {
        this.output = data().deepCopy(fields()[4].schema(), other.output);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxScore)) {
        this.maxScore = data().deepCopy(fields()[5].schema(), other.maxScore);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TestCaseEventDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(io.github.capure.schema.TestCaseEventDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.problemId)) {
        this.problemId = data().deepCopy(fields()[1].schema(), other.problemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.input)) {
        this.input = data().deepCopy(fields()[3].schema(), other.input);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.output)) {
        this.output = data().deepCopy(fields()[4].schema(), other.output);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maxScore)) {
        this.maxScore = data().deepCopy(fields()[5].schema(), other.maxScore);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'problemId' field.
      * @return The value.
      */
    public java.lang.Long getProblemId() {
      return problemId;
    }

    /**
      * Sets the value of the 'problemId' field.
      * @param value The value of 'problemId'.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder setProblemId(long value) {
      validate(fields()[1], value);
      this.problemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'problemId' field has been set.
      * @return True if the 'problemId' field has been set, false otherwise.
      */
    public boolean hasProblemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'problemId' field.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder clearProblemId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * @return The value.
      */
    public java.lang.CharSequence getInput() {
      return input;
    }

    /**
      * Sets the value of the 'input' field.
      * @param value The value of 'input'.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder setInput(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.input = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'input' field.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder clearInput() {
      input = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'output' field.
      * @return The value.
      */
    public java.lang.CharSequence getOutput() {
      return output;
    }

    /**
      * Sets the value of the 'output' field.
      * @param value The value of 'output'.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder setOutput(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.output = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'output' field has been set.
      * @return True if the 'output' field has been set, false otherwise.
      */
    public boolean hasOutput() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'output' field.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder clearOutput() {
      output = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxScore' field.
      * @return The value.
      */
    public java.lang.Integer getMaxScore() {
      return maxScore;
    }

    /**
      * Sets the value of the 'maxScore' field.
      * @param value The value of 'maxScore'.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder setMaxScore(int value) {
      validate(fields()[5], value);
      this.maxScore = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'maxScore' field has been set.
      * @return True if the 'maxScore' field has been set, false otherwise.
      */
    public boolean hasMaxScore() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'maxScore' field.
      * @return This builder.
      */
    public io.github.capure.schema.TestCaseEventDetails.Builder clearMaxScore() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestCaseEventDetails build() {
      try {
        TestCaseEventDetails record = new TestCaseEventDetails();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.problemId = fieldSetFlags()[1] ? this.problemId : (java.lang.Long) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.input = fieldSetFlags()[3] ? this.input : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.output = fieldSetFlags()[4] ? this.output : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.maxScore = fieldSetFlags()[5] ? this.maxScore : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestCaseEventDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestCaseEventDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestCaseEventDetails>
    READER$ = (org.apache.avro.io.DatumReader<TestCaseEventDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
